generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL_DEV")
  // url      = env("DATABASE_URL") // prod
}

//||############### HELLOCAR - ONLINE CAR RENTAL ############# ||

model User_Cardeal {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  image     String?
  admin     Boolean  @default(false)
  reports   Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id           String        @id @default(uuid())
  price        Int
  make         String
  model        String
  color        String
  transmission String
  fuel_type    String
  year         Int
  mileage      Int
  approved     Boolean       @default(false)
  author       User_Cardeal? @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     String?
  createdAt    DateTime      @default(now())
}

//|| ########## INVOICE - INVOICE MANAGEMENT SYSTEM ################ ||

model User_Invoice {
  id        String    @id @default(uuid())
  image     String?
  name      String
  username  String
  email     String    @unique
  password  String
  admin     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Status_Invoice {
  id     String @id @default(uuid())
  status String
}

model Invoice {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  paymentDue   DateTime     @default(now())
  description  String
  paymentTerms Int
  user         User_Invoice @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String
  client       Client       @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id    String       @unique
  status       String
  orders       Orders[]
}

model Item {
  id     String   @id @default(uuid())
  name   String
  price  Float
  orders Orders[]
}

model Orders {
  id         String  @id @default(uuid())
  quantity   Int
  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  invoice_id String
  item       Item    @relation(fields: [item_id], references: [id])
  item_id    String
}

model Client {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  invoice    Invoice[]
  address_id String?   @unique
  address    Address?  @relation(fields: [address_id], references: [id])
}

model Address {
  id       String  @id @default(uuid())
  street   String
  city     String
  postcode String
  country  String
  client   Client?
}

//|| ########### FEEDBACKS - FEEDBACKS MANAGEMENT ############### ||

model User_Feedback {
  id        String     @id @default(uuid())
  image     String?
  name      String
  username  String     @unique
  email     String     @unique
  password  String
  admin     Boolean    @default(false)
  Comment   Comment[]
  Feedback  Feedback[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Reply     Reply[]
  Upvote    Upvote[]
}

model Feedback {
  id          String        @id @default(uuid())
  title       String
  description String
  category    String
  status      String
  user        User_Feedback @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  Comment     Comment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Upvote      Upvote[]
}

model Category_Feedback {
  id   String @id @default(uuid())
  name String
}

model Status_Feedback {
  id   String @id @default(uuid())
  name String
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  user        User_Feedback @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  feedback    Feedback      @relation(fields: [feedback_id], references: [id], onDelete: Cascade)
  feedback_id String
  created_at  DateTime      @default(now())
  Reply       Reply[]
}

model Reply {
  id         String        @id @default(uuid())
  content    String
  user       User_Feedback @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  comment    Comment       @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id String
  created_at DateTime      @default(now())
}

model Upvote {
  id          String        @id @default(uuid())
  user        User_Feedback @relation(fields: [user_id], references: [id], onDelete: Cascade)
  feedback    Feedback      @relation(fields: [feedback_id], references: [id], onDelete: Cascade)
  user_id     String
  feedback_id String
  createdAt   DateTime      @default(now())

  @@unique([user_id, feedback_id]) // user_id + feedback_id
}
