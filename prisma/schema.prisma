generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL_DEV")
}

model User {
  id        String     @id @default(uuid())
  image     String?    @default("https://feedback-profile-pics-001.s3.amazonaws.com/user-images/user_avatar.png")
  name      String
  username  String     @unique
  email     String     @unique
  password  String
  admin     Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  feedbacks Feedback[]
  comments  Comment[]
  replies   Reply[]
  upvotes   Upvote[]
  invoices  Invoice[]
  reports   Report[]
}

model Feedback {
  id          String    @id @default(uuid())
  title       String
  description String
  user_id     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String    @default("feature")
  status      String    @default("suggestion")
  comments    Comment[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  upvotes     Upvote[]
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  user_id     String
  feedback_id String
  created_at  DateTime @default(now())
  feedback    Feedback @relation(fields: [feedback_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reply       Reply[]
}

model Reply {
  id         String   @id @default(uuid())
  content    String
  comment_id String
  created_at DateTime @default(now())
  user_id    String
  comment    Comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Upvote {
  id          String   @id @default(uuid())
  user_id     String
  feedback_id String
  createdAt   DateTime @default(now())
  feedback    Feedback @relation(fields: [feedback_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, feedback_id])
}

model Report {
  id           String   @id @default(uuid())
  price        Int
  make         String
  model        String
  color        String
  transmission String
  fuel_type    String
  year         Int
  mileage      Int
  approved     Boolean  @default(false)
  user_id      String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// model User_Cardeal {
//   id        String   @id @default(uuid())
//   email     String   @unique
//   password  String
//   admin     Boolean  @default(false)
//   createdAt DateTime @default(now())
//   image     String?  @default("https://feedback-profile-pics-001.s3.amazonaws.com/user-images/user_avatar.png")
//   updatedAt DateTime @updatedAt
//   reports   Report[]
// }

// model User_Invoice {
//   id        String    @id @default(uuid())
//   email     String    @unique
//   password  String
//   admin     Boolean   @default(false)
//   createdAt DateTime  @default(now())
//   image     String?   @default("https://feedback-profile-pics-001.s3.amazonaws.com/user-images/user_avatar.png")
//   name      String
//   updatedAt DateTime  @updatedAt
//   username  String    @unique
//   invoices  Invoice[]
// }

model Status_Invoice {
  id     String @id @default(uuid())
  status String
}

model Client {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  address_id String?   @unique
  address    Address?  @relation(fields: [address_id], references: [id])
  invoice    Invoice[]
}

model Invoice {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  description  String
  paymentDue   DateTime @default(now())
  paymentTerms Int
  status       String   @default("pending")
  client_id    String
  user_id      String
  client       Client   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders       Orders[]
}

model Item {
  id     String   @id @default(uuid())
  name   String
  price  Float
  orders Orders[]
}

model Orders {
  id         String  @id @default(uuid())
  quantity   Int
  invoice_id String
  item_id    String
  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  item       Item    @relation(fields: [item_id], references: [id])
}

model Address {
  id       String  @id @default(uuid())
  street   String
  city     String
  postcode String
  country  String
  client   Client?
}

// model User_Feedback {
//   id        String    @id @default(uuid())
//   email     String    @unique
//   password  String
//   admin     Boolean   @default(false)
//   createdAt DateTime  @default(now())
//   image     String?   @default("https://feedback-profile-pics-001.s3.amazonaws.com/user-images/user_avatar.png")
//   name      String
//   updatedAt DateTime  @updatedAt
//   username  String    @unique
//   Comment   Comment[]
//   // Feedback  Feedback[]
//   Reply     Reply[]
//   Upvote    Upvote[]
// }

model Category_Feedback {
  id   String @id @default(uuid())
  name String
}

model Status_Feedback {
  id   String @id @default(uuid())
  name String
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}
